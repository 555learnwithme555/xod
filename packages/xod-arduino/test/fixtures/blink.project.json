{
  "name": "blinking-led",
  "authors": [
    "Amperka team"
  ],
  "license": "",
  "version": "",
  "description": "",
  "patches": {
    "xod/math/subtrac": {
      "description": "This patch in the test fixture needed only to show that all needless patches will be ignored",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "a": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "a",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "b": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "b",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "out": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "out",
          "type": "xod/patch-nodes/output-number",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: (e.inputs.a - e.inputs.b) };\n};\n"
      },
      "path": "xod/math/subtrac"
    },
    "xod/math/multiply": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "A": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "A",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "B": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "B",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 100,
            "y": 0
          }
        },
        "OUT": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "OUT",
          "type": "xod/patch-nodes/output-number",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    const Number in1 = getNumber(nid, Inputs::IN_0);\n    const Number in2 = getNumber(nid, Inputs::IN_1);\n    emitNumber(nid, Outputs::OUT, in1 * in2);\n}\n",
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { out: (e.inputs.a * e.inputs.b) };\n};\n"
      },
      "path": "xod/math/multiply"
    },
    "xod/core/latch": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "RST": {
          "label": "RST",
          "description": "",
          "boundValues": {},
          "id": "RST",
          "type": "xod/patch-nodes/input-pulse",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "SET": {
          "label": "SET",
          "description": "",
          "boundValues": {},
          "id": "SET",
          "type": "xod/patch-nodes/input-pulse",
          "position": {
            "x": 100,
            "y": 0
          }
        },
        "OUT": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "OUT",
          "type": "xod/patch-nodes/output-boolean",
          "position": {
            "x": 0,
            "y": 300
          }
        },
        "TGL": {
          "label": "TGL",
          "description": "",
          "boundValues": {},
          "id": "TGL",
          "type": "xod/patch-nodes/input-pulse",
          "position": {
            "x": 0,
            "y": 0
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n    bool value;\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    if (isInputDirty(nid, Inputs::RST)) {\n        state->value = false;\n    } else if (isInputDirty(nid, Inputs::SET)) {\n        state->value = true;\n    } else {\n        state->value = !state->value;\n    }\n\n    emitLogic(nid, Outputs::OUT, state->value);\n}\n",
        "js": "\nmodule.exports.evaluate = function(e) {\n  var inputs = e.inputs;\n  var newState;\n\n  if (inputs.TGL) {\n    newState = !e.context.state;\n  } else if (inputs.SET) {\n    newState = true;\n  } else /* if (inputs.RST) */ {\n    newState = false;\n  }\n\n  e.context.state = newState;\n  return { OUT: newState };\n};\n"
      },
      "path": "xod/core/latch"
    },
    "xod/core/digital-output": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "PIN": {
          "label": "PORT",
          "description": "",
          "boundValues": {},
          "id": "PIN",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 200,
            "y": 0
          }
        },
        "VAL": {
          "label": "VAL",
          "description": "",
          "boundValues": {},
          "id": "VAL",
          "type": "xod/patch-nodes/input-boolean",
          "position": {
            "x": 0,
            "y": 0
          }
        }
      },
      "links": {},
      "impls": {
        "arduino": "struct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    const int pin = (int)getNumber(nid, Inputs::PORT);\n    const bool val = getLogic(nid, Inputs::VAL);\n\n    if (isInputDirty(nid, Inputs::PORT)) {\n        ::pinMode(pin, OUTPUT);\n    }\n\n    ::digitalWrite(pin, val);\n}\n",
        "espruino": "\nmodule.exports.evaluate = function(e) {\n  digitalWrite(e.inputs.pin, e.inputs.VAL);\n};\n"
      },
      "path": "xod/core/digital-output"
    },
    "xod/core/constant-number": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "VAL": {
          "label": "VAL",
          "description": "",
          "boundValues": {},
          "id": "VAL",
          "type": "xod/patch-nodes/output-number",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    reemitNumber(nid, Outputs::VAL);\n}\n"
      },
      "path": "xod/core/constant-number"
    },
    "xod/core/constant-logic": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "VAL": {
          "label": "VAL",
          "description": "",
          "boundValues": {},
          "id": "VAL",
          "type": "xod/patch-nodes/output-boolean",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    reemitLogic(nid, Outputs::VAL);\n}\n"
      },
      "path": "xod/core/constant-logic"
    },
    "xod/core/clock": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "IVAL": {
          "label": "IVAL",
          "description": "",
          "boundValues": {},
          "id": "IVAL",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "TICK": {
          "label": "TICK",
          "description": "",
          "boundValues": {},
          "id": "TICK",
          "type": "xod/patch-nodes/output-pulse",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n    TimeMs nextTrig;\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    TimeMs tNow = transactionTime();\n    TimeMs dt = getNumber(nid, Inputs::IVAL) * 1000;\n    TimeMs tNext = tNow + dt;\n\n    if (isInputDirty(nid, Inputs::IVAL)) {\n        if (dt == 0) {\n            state->nextTrig = 0;\n            clearTimeout(nid);\n        } else if (state->nextTrig < tNow || state->nextTrig > tNext) {\n            state->nextTrig = tNext;\n            setTimeout(nid, dt);\n        }\n    } else {\n        // It was a scheduled tick\n        emitLogic(nid, Outputs::TICK, 1);\n        state->nextTrig = tNext;\n        setTimeout(nid, dt);\n    }\n}\n",
        "js": "\nmodule.exports.evaluate = function(e) {\n  if (e.context.intervalID) {\n    clearInterval(e.context.intervalID);\n  }\n\n  e.context.intervalID = setInterval(function() {\n    e.fire({ tick: PULSE });\n  }, e.inputs.interval * 1000);\n};\n"
      },
      "path": "xod/core/clock"
    },
    "xod/core/cast-number-to-boolean": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "__in__": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "__in__",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "__out__": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "__out__",
          "type": "xod/patch-nodes/output-boolean",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    emitLogic(nid, Outputs::OUT, getNumber(nid, Inputs::IN));\n}\n",
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { OUT: Boolean(e.inputs.IN) };\n};\n"
      },
      "path": "xod/core/cast-number-to-boolean"
    },
    "xod/core/cast-boolean-to-number": {
      "description": "",
      "nodes": {
        "noNativeImpl": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "noNativeImpl",
          "position": {
            "x": 100,
            "y": 100
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "__in__": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "__in__",
          "type": "xod/patch-nodes/input-boolean",
          "position": {
            "x": 0,
            "y": 0
          }
        },
        "__out__": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "__out__",
          "type": "xod/patch-nodes/output-number",
          "position": {
            "x": 0,
            "y": 300
          }
        }
      },
      "links": {},
      "impls": {
        "cpp": "struct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(NodeId nid, State* state) {\n    emitNumber(nid, Outputs::OUT, getLogic(nid, Inputs::IN));\n}\n",
        "js": "\nmodule.exports.evaluate = function(e) {\n  return { OUT: Number(e.inputs.IN) };\n};\n"
      },
      "path": "xod/core/cast-boolean-to-number"
    },
    "@/main": {
      "description": "",
      "nodes": {
        "HJ_qghzlol": {
          "label": "",
          "description": "",
          "boundValues": {
            "HJUce2Gxox": 13
          },
          "id": "HJ_qghzlol",
          "type": "@/led",
          "position": {
            "x": 266,
            "y": 224
          }
        },
        "ByDqlnfgsg": {
          "label": "",
          "description": "",
          "boundValues": {
            "Skb5l2fxol": 0.2
          },
          "id": "ByDqlnfgsg",
          "type": "@/blink",
          "position": {
            "x": 266,
            "y": 120
          }
        }
      },
      "links": {
        "H1om9g2flse": {
          "id": "H1om9g2flse",
          "output": {
            "nodeId": "ByDqlnfgsg",
            "pinKey": "B1Gce3fgie"
          },
          "input": {
            "nodeId": "HJ_qghzlol",
            "pinKey": "HJHcl2zxse"
          }
        }
      },
      "impls": {},
      "label": "Main",
      "path": "@/main"
    },
    "@/led": {
      "description": "",
      "nodes": {
        "HJUce2Gxox": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "HJUce2Gxox",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 138,
            "y": 120
          }
        },
        "HJHcl2zxse": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "HJHcl2zxse",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 266,
            "y": 120
          }
        },
        "r1E5ghzlol": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "r1E5ghzlol",
          "type": "xod/core/digital-output",
          "position": {
            "x": 138,
            "y": 328
          }
        },
        "ByQqe3Gxse": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "ByQqe3Gxse",
          "type": "xod/math/multiply",
          "position": {
            "x": 266,
            "y": 224
          }
        }
      },
      "links": {
        "SyPX9lnMxje": {
          "id": "SyPX9lnMxje",
          "output": {
            "nodeId": "HJHcl2zxse",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "ByQqe3Gxse",
            "pinKey": "B"
          }
        },
        "Bk_Xqlhflog": {
          "id": "Bk_Xqlhflog",
          "output": {
            "nodeId": "HJHcl2zxse",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "ByQqe3Gxse",
            "pinKey": "A"
          }
        },
        "BkYQclhfeog": {
          "id": "BkYQclhfeog",
          "output": {
            "nodeId": "HJUce2Gxox",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "r1E5ghzlol",
            "pinKey": "PIN"
          }
        },
        "H19Xcx3zgjg": {
          "id": "H19Xcx3zgjg",
          "output": {
            "nodeId": "ByQqe3Gxse",
            "pinKey": "OUT"
          },
          "input": {
            "nodeId": "r1E5ghzlol",
            "pinKey": "VAL"
          }
        }
      },
      "impls": {},
      "label": "Led",
      "path": "@/led"
    },
    "@/blink": {
      "description": "",
      "nodes": {
        "B1Gce3fgie": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "B1Gce3fgie",
          "type": "xod/patch-nodes/output-boolean",
          "position": {
            "x": 266,
            "y": 432
          }
        },
        "Skb5l2fxol": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "Skb5l2fxol",
          "type": "xod/patch-nodes/input-number",
          "position": {
            "x": 266,
            "y": 120
          }
        },
        "rylqlnGxse": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "rylqlnGxse",
          "type": "xod/core/latch",
          "position": {
            "x": 266,
            "y": 328
          }
        },
        "H1ce2fxil": {
          "label": "",
          "description": "",
          "boundValues": {},
          "id": "H1ce2fxil",
          "type": "xod/core/clock",
          "position": {
            "x": 266,
            "y": 224
          }
        }
      },
      "links": {
        "rJNQ5x3Glsl": {
          "id": "rJNQ5x3Glsl",
          "output": {
            "nodeId": "H1ce2fxil",
            "pinKey": "TICK"
          },
          "input": {
            "nodeId": "rylqlnGxse",
            "pinKey": "TGL"
          }
        },
        "rkrXqx3Gesg": {
          "id": "rkrXqx3Gesg",
          "output": {
            "nodeId": "Skb5l2fxol",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "H1ce2fxil",
            "pinKey": "IVAL"
          }
        },
        "H18QcghMgil": {
          "id": "H18QcghMgil",
          "output": {
            "nodeId": "rylqlnGxse",
            "pinKey": "OUT"
          },
          "input": {
            "nodeId": "B1Gce3fgie",
            "pinKey": "__in__"
          }
        }
      },
      "impls": {},
      "label": "Blink",
      "path": "@/blink"
    }
  }
}
