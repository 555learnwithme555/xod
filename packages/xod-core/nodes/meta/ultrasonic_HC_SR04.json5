{
  label: "HC-SR04",
  category: 'hardware',
  inputs: [{
    key: 'sample',
    type: 'pulse',
    pinLabel: 'PLS',
    label: 'Pulse',
    description: 'Sample current value',
  },
  {
    key: 'units',
    pinLabel: 'UNT',
    label: 'Units',
    type: 'string',
    value: 'mm',
  }],
  outputs: [{
    key: 'value',
    type: 'number',
    pinLabel: 'DST',
    description: 'Sampled distance (mm)',
  },
  {
    key: 'error',
    type: 'string',
    pinLabel: 'ERR',
    description: 'Operation error',
  }],
  properties: [{
    key: 'pinTrig',
    label: 'Pin trigger',
    type: 'string',
    value: 'C9',
  },
  {
    key: 'pinEcho',
    label: 'Pin echo',
    type: 'string',
    value: 'A8',
  }],
  impl: {
    espruino: "\nvar sonic = require('@amperka/ultrasonic');\n\nmodule.exports.setup = function(e) {\n  var pinTrig = new Pin(e.props.pinTrig);\n  var pinEcho = new Pin(e.props.pinEcho);\n  e.context.device = sonic.connect({\n    trigPin: pinTrig,\n    echoPin: pinEcho\n  });\n  e.context.units = e.props.units;  // FIXME! remove prop in the future\n  e.context.isBusy = false;\n};\n\nmodule.exports.evaluate = function(e) {\n  if (e.context.isBusy) {\n    e.fire({ error: \"busy\" });\n  } else {\n    e.context.isBusy = true;\n    e.context.device.ping(function(err, value) {\n      e.context.isBusy = false;\n      if (err) {\n        e.fire({ error: err.msg });\n      } else {\n        e.fire({ value: value });\n      }\n    }, e.context.units);\n  }\n};\n",
  },
}
