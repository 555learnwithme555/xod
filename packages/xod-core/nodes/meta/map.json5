{
  inputs: [{
    key: 'inp',
    type: 'number',
    pinLabel: 'IN',
    label: 'Input',
    value: 0,
    description: 'Input value to map'
  }, {
    key: 'inA',
    type: 'number',
    injected: true,
    pinLabel: 'As',
    label: 'Input range start',
    value: 0,
    description: 'Input range start'
  }, {
    key: 'inB',
    type: 'number',
    injected: true,
    pinLabel: 'Bs',
    label: 'Input range end',
    value: 0,
    description: 'Input range end'
  }, {
    key: 'outA',
    type: 'number',
    injected: true,
    pinLabel: 'At',
    label: 'Output range start',
    value: 0,
    description: 'Output range start'
  }, {
    key: 'outB',
    type: 'number',
    injected: true,
    pinLabel: 'Bt',
    label: 'Output range end',
    value: 0,
    description: 'Output range end'
  }, {
    key: 'clip',
    type: 'bool',
    injected: true,
    pinLabel: 'CL',
    label: 'Clip',
    value: false,
    description: 'Clip result to output range'
  }],
  outputs: [{
    key: 'out',
    type: 'number',
    description: 'Mapped value',
  }],
  impl: {
    js: "\nmodule.exports.evaluate = function(e) {\n  var inputs = e.inputs;\n  var k = (inputs.inp - inputs.inA) / (inputs.inB - inputs.inA);\n  var out = inputs.outA + k * (inputs.outB - inputs.outA);\n\n  if (inputs.clip) {\n    if (inputs.outB > inputs.outA) {\n      out = Math.max(inputs.outA, out);\n      out = Math.min(inputs.outB, out);\n    } else {\n      out = Math.max(inputs.outB, out);\n      out = Math.min(inputs.outA, out);\n    }\n  }\n\n  return { out: out };\n};\n",
  },
}
