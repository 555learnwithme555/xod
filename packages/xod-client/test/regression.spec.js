import thunk from 'redux-thunk';
import { createStore, applyMiddleware } from 'redux';
import { default as chai, expect } from 'chai';
import dirtyChai from 'dirty-chai';
import { explode } from 'xod-func-tools';

import { transpileForEspruino } from 'xod-js';

import initialState from '../src/core/state';
import generateReducers from '../src/core/reducer';
import { addNode, openProject } from '../src/project/actions';
import { getProject } from '../src/project/selectors';

chai.use(dirtyChai);

const initialProject = {
  authors: [
    'Amperka team',
  ],
  description: '',
  license: '',
  name: 'Awesome project',
  patches: {
    '@/main': {
      impls: {},
      links: {},
      nodes: {},
      path: '@/main',
    },
    'xod/core/button': {
      impls: {
        espruino: "\nmodule.exports.setup = function(e) {\n  var pin = new Pin(e.props.pin);\n\n  setWatch(function(evt) {\n    e.fire({ state: !evt.state });\n  }, pin, {\n    edge: 'both',\n    repeat: true,\n    debounce: 30\n  });\n};\n",
      },
      links: {},
      nodes: {
        noNativeImpl: {
          description: '',
          id: 'noNativeImpl',
          label: '',
          position: {
            x: 100,
            y: 100,
          },
          type: 'xod/patch-nodes/not-implemented-in-xod',
        },
        state: {
          id: 'state',
          type: 'xod/patch-nodes/output-boolean',
          position: {
            x: 0,
            y: 300,
          },
          label: '',
          description: '',
        },
      },
      path: 'xod/core/button',
    },
  },
};


describe('xod-client regression -> xod-js', () => {
  it('should transpile example initial state to kinda valid code', () => {
    const store = createStore(generateReducers(), initialState, applyMiddleware(thunk));
    store.dispatch(openProject(initialProject));
    store.dispatch(addNode('xod/core/button', { x: 100, y: 100 }, '@/main'));

    const project = getProject(store.getState());

    const code = explode(transpileForEspruino(project, '@/main'));

    // We test the code generated by fare evaluation. Yes, this
    // will inject variables to the scope, so we limit it with an
    // anonymous function.
    /* eslint-disable no-undef */
    (() => {
      const mod = eval.call(null, code); // eslint-disable-line

      expect(project).to.exist();
      expect(nodes).to.exist();
      expect(topology).to.exist();
      expect(onInit).to.exist();

      expect(nodes).to.have.keys('0');
      expect(topology).to.be.eql(['0']);
    })();
    /* eslint-enable no-undef */
  });
});
